const types={pink:"pink",brown:"brown",white:"white"},timerInput=document.getElementById("timer"),useTimer=(e,t)=>{let n;function s(...s){n=setInterval(()=>e(...s),t)}function o(){clearInterval(n)}return[s,o]};function updateTimerInput(e){const t=Math.floor(e/3600),n=Math.floor(e%3600/60),s=e%60;timerInput.value=`${padZero(t)}:${padZero(n)}:${padZero(s)}`}async function handleStartNoise(e){const t=getUserDuration();audioContext&&await handleStopNoise(),t?(await generateNoise(e),startNoiseTimer()):await generateNoise(e)}async function handleStopNoise(){await audioContext.close(),audioContext=null,stopNoiseTimer()}const noiseTimer=()=>{let e=getUserDuration();e--,e<=0&&handleStopNoise(),updateTimerInput(e)},[startNoiseTimer,stopNoiseTimer]=useTimer(noiseTimer,1e3),getUserDuration=()=>{const e=getDurationInSeconds(timerInput.value);return e};let audioContext;const generateNoise=async e=>{audioContext=new(window.AudioContext||window.webkitAudioContext)({sampleRate:96e3}),await audioContext.audioWorklet.addModule("RandomNoiseProcessor.js");const t=new AudioWorkletNode(audioContext,"RandomNoiseProcessor",{processorOptions:{type:e}});t.connect(audioContext.destination)};function getDurationInSeconds(e){const[t,n,s]=e.split(":").map(Number),o=t*60*60+n*60+(s||0);return o}function padZero(e){return e<10?`0${e}`:e}const theme=localStorage.getItem("theme"),toggle=document.getElementById("toggle"),setTheme=e=>{if(e)toggle.checked=e==="dark";else{const e=window.matchMedia("(prefers-color-scheme: dark)");toggle.checked=e.matches}};setTheme(theme);const handleToggle=()=>{toggle.checked?localStorage.setItem("theme","dark"):localStorage.setItem("theme","light")}